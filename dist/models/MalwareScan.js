"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importStar(require("mongoose"));
const MalwareScanSchema = new mongoose_1.Schema({
    userId: {
        type: mongoose_1.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    filename: {
        type: String,
        required: true
    },
    originalName: {
        type: String,
        required: true
    },
    fileSize: {
        type: Number,
        required: true
    },
    fileType: {
        type: String,
        required: true
    },
    filePath: {
        type: String,
        required: true
    },
    fileHash: {
        md5: {
            type: String,
            required: true
        },
        sha1: {
            type: String,
            required: true
        },
        sha256: {
            type: String,
            required: true
        }
    },
    scanResults: {
        isInfected: {
            type: Boolean,
            default: false
        },
        malwareType: {
            type: String,
            enum: ['virus', 'trojan', 'worm', 'ransomware', 'spyware', 'adware', 'rootkit', 'backdoor']
        },
        malwareName: String,
        severity: {
            type: String,
            enum: ['low', 'medium', 'high', 'critical'],
            default: 'low'
        },
        confidence: {
            type: Number,
            min: 0,
            max: 100,
            default: 0
        },
        aiAnalysis: {
            type: String,
            default: ''
        },
        detectionMethods: [String],
        signatures: [{
                name: {
                    type: String,
                    required: true
                },
                type: {
                    type: String,
                    required: true
                },
                confidence: {
                    type: Number,
                    min: 0,
                    max: 100,
                    required: true
                }
            }],
        behaviorAnalysis: {
            suspiciousActivities: [String],
            networkConnections: [String],
            fileModifications: [String],
            registryChanges: [String]
        },
        suggestedActions: [String]
    },
    scanMetadata: {
        scanEngine: {
            type: String,
            default: 'AI-ThreatDetector v1.0'
        },
        engineVersion: {
            type: String,
            default: '1.0.0'
        },
        scanDuration: {
            type: Number,
            default: 0
        },
        scanTimestamp: {
            type: Date,
            default: Date.now
        },
        quarantined: {
            type: Boolean,
            default: false
        }
    },
    status: {
        type: String,
        enum: ['scanning', 'completed', 'failed', 'quarantined'],
        default: 'scanning'
    },
    errorMessage: String
}, {
    timestamps: true
});
// Indexes for better performance
MalwareScanSchema.index({ userId: 1, createdAt: -1 });
MalwareScanSchema.index({ 'fileHash.sha256': 1 });
MalwareScanSchema.index({ 'scanResults.isInfected': 1 });
MalwareScanSchema.index({ status: 1 });
exports.default = mongoose_1.default.model('MalwareScan', MalwareScanSchema);
//# sourceMappingURL=MalwareScan.js.map