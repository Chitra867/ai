"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../middleware/auth");
const MalwareScan_1 = __importDefault(require("../models/MalwareScan"));
const router = express_1.default.Router();
// Get all malware scans
router.get('/', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user._id;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;
        const scans = await MalwareScan_1.default.find({ userId })
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .select('-filePath'); // Exclude file path for security
        const total = await MalwareScan_1.default.countDocuments({ userId });
        res.json({
            scans,
            pagination: {
                page,
                limit,
                total,
                pages: Math.ceil(total / limit)
            }
        });
    }
    catch (error) {
        console.error('Get malware scans error:', error);
        res.status(500).json({ message: 'Error fetching malware scans' });
    }
});
// Get specific malware scan
router.get('/:id', auth_1.authenticate, async (req, res) => {
    try {
        const scan = await MalwareScan_1.default.findOne({
            _id: req.params.id,
            userId: req.user._id
        }).select('-filePath'); // Exclude file path for security
        if (!scan) {
            return res.status(404).json({ message: 'Scan not found' });
        }
        res.json(scan);
    }
    catch (error) {
        console.error('Get malware scan error:', error);
        res.status(500).json({ message: 'Error fetching malware scan' });
    }
});
// Get scan status
router.get('/:id/status', auth_1.authenticate, async (req, res) => {
    try {
        const scan = await MalwareScan_1.default.findOne({
            _id: req.params.id,
            userId: req.user._id
        }).select('status scanResults.isInfected scanResults.severity createdAt updatedAt');
        if (!scan) {
            return res.status(404).json({ message: 'Scan not found' });
        }
        res.json({
            id: scan._id,
            status: scan.status,
            isInfected: scan.scanResults.isInfected,
            severity: scan.scanResults.severity,
            createdAt: scan.createdAt,
            updatedAt: scan.updatedAt
        });
    }
    catch (error) {
        console.error('Get scan status error:', error);
        res.status(500).json({ message: 'Error fetching scan status' });
    }
});
// Quarantine file
router.post('/:id/quarantine', auth_1.authenticate, async (req, res) => {
    try {
        const scan = await MalwareScan_1.default.findOne({
            _id: req.params.id,
            userId: req.user._id
        });
        if (!scan) {
            return res.status(404).json({ message: 'Scan not found' });
        }
        if (!scan.scanResults.isInfected) {
            return res.status(400).json({ message: 'Cannot quarantine clean file' });
        }
        scan.status = 'quarantined';
        scan.scanMetadata.quarantined = true;
        await scan.save();
        res.json({ message: 'File quarantined successfully' });
    }
    catch (error) {
        console.error('Quarantine error:', error);
        res.status(500).json({ message: 'Error quarantining file' });
    }
});
// Delete scan record
router.delete('/:id', auth_1.authenticate, async (req, res) => {
    try {
        const scan = await MalwareScan_1.default.findOneAndDelete({
            _id: req.params.id,
            userId: req.user._id
        });
        if (!scan) {
            return res.status(404).json({ message: 'Scan not found' });
        }
        res.json({ message: 'Scan deleted successfully' });
    }
    catch (error) {
        console.error('Delete scan error:', error);
        res.status(500).json({ message: 'Error deleting scan' });
    }
});
// Get malware statistics
router.get('/stats/overview', auth_1.authenticate, async (req, res) => {
    try {
        const userId = req.user._id;
        const days = parseInt(req.query.days) || 30;
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
        // Get infection statistics
        const infectionStats = await MalwareScan_1.default.aggregate([
            {
                $match: {
                    userId,
                    createdAt: { $gte: startDate }
                }
            },
            {
                $group: {
                    _id: '$scanResults.isInfected',
                    count: { $sum: 1 }
                }
            }
        ]);
        // Get malware type distribution
        const malwareTypes = await MalwareScan_1.default.aggregate([
            {
                $match: {
                    userId,
                    'scanResults.isInfected': true,
                    createdAt: { $gte: startDate }
                }
            },
            {
                $group: {
                    _id: '$scanResults.malwareType',
                    count: { $sum: 1 },
                    avgConfidence: { $avg: '$scanResults.confidence' }
                }
            },
            {
                $sort: { count: -1 }
            }
        ]);
        // Get severity distribution
        const severityStats = await MalwareScan_1.default.aggregate([
            {
                $match: {
                    userId,
                    'scanResults.isInfected': true,
                    createdAt: { $gte: startDate }
                }
            },
            {
                $group: {
                    _id: '$scanResults.severity',
                    count: { $sum: 1 }
                }
            }
        ]);
        res.json({
            infectionStats: infectionStats.map(stat => ({
                status: stat._id ? 'infected' : 'clean',
                count: stat.count
            })),
            malwareTypes: malwareTypes.map(type => ({
                type: type._id || 'Unknown',
                count: type.count,
                avgConfidence: Math.round(type.avgConfidence || 0)
            })),
            severityStats: severityStats.map(stat => ({
                severity: stat._id,
                count: stat.count
            }))
        });
    }
    catch (error) {
        console.error('Malware stats error:', error);
        res.status(500).json({ message: 'Error fetching malware statistics' });
    }
});
exports.default = router;
//# sourceMappingURL=malware.js.map