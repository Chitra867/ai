import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { api } from '../services/api';
import { useNotification } from '../contexts/NotificationContext';

interface MalwareScan {
  _id: string;
  fileName: string;
  fileSize: number;
  scanStatus: 'clean' | 'infected' | 'suspicious';
  malwareType?: string;
  malwareName?: string;
  riskLevel: 'Low' | 'Medium' | 'High';
  suggestedActions: string[];
  aiAnalysis: string;
  createdAt: string;
}

const MalwareScanner: React.FC = () => {
  const [scans, setScans] = useState<MalwareScan[]>([]);
  const [loading, setLoading] = useState(false);
  const [scanning, setScanning] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const { addNotification } = useNotification();

  useEffect(() => {
    fetchScans();
  }, []);

  const fetchScans = async () => {
    try {
      setLoading(true);
      const response = await api.get('/malware');
      setScans(response.data);
    } catch (error) {
      addNotification('Failed to fetch malware scans', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleFileUpload = async (file: File) => {
    const formData = new FormData();
    formData.append('file', file);

    try {
      setScanning(true);
      const response = await api.post('/malware/scan', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      setScans(prev => [response.data, ...prev]);
      addNotification('File scanned successfully', 'success');
    } catch (error) {
      addNotification('Failed to scan file', 'error');
    } finally {
      setScanning(false);
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    const files = e.dataTransfer.files;
    if (files && files[0]) {
      handleFileUpload(files[0]);
    }
  };

  const handleFileInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      handleFileUpload(file);
    }
    event.target.value = '';
  };

  const getScanStatusColor = (status: string) => {
    switch (status) {
      case 'infected': return 'text-red-400 bg-red-900/20 border-red-500';
      case 'suspicious': return 'text-yellow-400 bg-yellow-900/20 border-yellow-500';
      case 'clean': return 'text-green-400 bg-green-900/20 border-green-500';
      default: return 'text-gray-400 bg-gray-900/20 border-gray-500';
    }
  };

  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case 'High': return 'text-red-400';
      case 'Medium': return 'text-yellow-400';
      case 'Low': return 'text-green-400';
      default: return 'text-gray-400';
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="p-6 space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex justify-between items-center"
      >
        <h1 className="text-3xl font-bold text-white">Malware Scanner</h1>
      </motion.div>

      {/* File Upload Area */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className={`relative border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
          dragActive
            ? 'border-blue-500 bg-blue-900/10'
            : 'border-gray-600 hover:border-gray-500'
        }`}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <input
          type="file"
          onChange={handleFileInput}
          className="hidden"
          id="file-upload"
          disabled={scanning}
        />
        <label
          htmlFor="file-upload"
          className="cursor-pointer"
        >
          <div className="space-y-4">
            <div className="text-6xl text-gray-400">
              üìÅ
            </div>
            <div>
              <div className="text-xl text-white font-medium">
                {scanning ? 'Scanning file...' : 'Drop files here or click to upload'}
              </div>
              <div className="text-gray-400 mt-2">
                Supports all file types for malware analysis
              </div>
            </div>
            {scanning && (
              <div className="flex justify-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              </div>
            )}
          </div>
        </label>
      </motion.div>

      {/* Scan Results */}
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <div className="grid gap-6">
          {scans.length === 0 ? (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center py-12"
            >
              <div className="text-gray-400 text-lg">
                No scans yet. Upload a file to get started.
              </div>
            </motion.div>
          ) : (
            scans.map((scan, index) => (
              <motion.div
                key={scan._id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-gray-800 rounded-lg p-6 border border-gray-700"
              >
                <div className="flex justify-between items-start mb-4">
                  <div className="flex-1">
                    <h3 className="text-xl font-semibold text-white mb-1">
                      {scan.fileName}
                    </h3>
                    <div className="text-sm text-gray-400 space-x-4">
                      <span>{formatFileSize(scan.fileSize)}</span>
                      <span>{new Date(scan.createdAt).toLocaleString()}</span>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <span
                      className={`px-3 py-1 rounded-full text-sm font-medium border ${getScanStatusColor(
                        scan.scanStatus
                      )}`}
                    >
                      {scan.scanStatus.charAt(0).toUpperCase() + scan.scanStatus.slice(1)}
                    </span>
                    <span className={`text-sm font-medium ${getRiskLevelColor(scan.riskLevel)}`}>
                      {scan.riskLevel} Risk
                    </span>
                  </div>
                </div>

                {scan.malwareName && (
                  <div className="mb-4 p-4 bg-red-900/20 border border-red-500 rounded-lg">
                    <div className="flex items-center space-x-2 text-red-400 font-medium mb-2">
                      <span>‚ö†Ô∏è</span>
                      <span>Malware Detected</span>
                    </div>
                    <div className="text-white">
                      <div><strong>Name:</strong> {scan.malwareName}</div>
                      {scan.malwareType && (
                        <div><strong>Type:</strong> {scan.malwareType}</div>
                      )}
                    </div>
                  </div>
                )}

                <div className="space-y-4">
                  <div>
                    <h4 className="text-lg font-medium text-white mb-2">AI Analysis</h4>
                    <p className="text-gray-300 bg-gray-900 p-3 rounded-lg">
                      {scan.aiAnalysis}
                    </p>
                  </div>

                  <div>
                    <h4 className="text-lg font-medium text-white mb-2">Suggested Actions</h4>
                    <div className="space-y-2">
                      {scan.suggestedActions.map((action, idx) => (
                        <div
                          key={idx}
                          className="flex items-center space-x-2 text-gray-300"
                        >
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <span>{action}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </motion.div>
            ))
          )}
        </div>
      )}
    </div>
  );
};

export default MalwareScanner;