import React, { useState, useEffect } from 'react';
import { Upload, File, Shield, AlertTriangle, CheckCircle, XCircle, Scan, Brain, Clock } from 'lucide-react';
import { generateMalwareResults } from '../utils/aiDataGenerator';
import { MalwareResult } from '../types';

const MalwareScanner: React.FC = () => {
  const [scanResults, setScanResults] = useState<MalwareResult[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [currentFile, setCurrentFile] = useState<string | null>(null);

  useEffect(() => {
    // Load previous scan results
    const loadResults = async () => {
      await new Promise(resolve => setTimeout(resolve, 500));
      setScanResults(generateMalwareResults(8));
    };
    loadResults();
  }, []);

  const simulateScan = async (fileName: string, fileSize: number) => {
    setIsScanning(true);
    setCurrentFile(fileName);
    setScanProgress(0);

    // Simulate scanning progress
    const steps = [
      { progress: 15, status: 'Initializing AI scanner...' },
      { progress: 30, status: 'Analyzing file structure...' },
      { progress: 45, status: 'Checking malware signatures...' },
      { progress: 60, status: 'Deep learning analysis...' },
      { progress: 75, status: 'Behavioral pattern matching...' },
      { progress: 90, status: 'Generating threat assessment...' },
      { progress: 100, status: 'Scan complete!' }
    ];

    for (const step of steps) {
      await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
      setScanProgress(step.progress);
    }

    // Generate scan result
    const result = generateMalwareResults(1)[0];
    result.fileName = fileName;
    result.fileSize = fileSize;
    result.scanTime = new Date();

    setScanResults(prev => [result, ...prev]);
    setIsScanning(false);
    setCurrentFile(null);
    setScanProgress(0);
  };

  const handleFileUpload = (file: File) => {
    simulateScan(file.name, file.size);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const ThreatBadge: React.FC<{ level: string }> = ({ level }) => {
    const getBadgeClass = (level: string) => {
      switch (level.toLowerCase()) {
        case 'high': return 'threat-badge-high';
        case 'medium': return 'threat-badge-medium';
        case 'low': return 'threat-badge-low';
        default: return 'threat-badge-low';
      }
    };

    return <span className={getBadgeClass(level)}>{level.toUpperCase()}</span>;
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-text-light mb-2">Malware Scanner</h1>
        <p className="text-gray-400">AI-powered file analysis and malware detection</p>
      </div>

      {/* Upload Area */}
      <div className="mb-8 card">
        <div
          className={`border-2 border-dashed rounded-lg p-8 transition-colors duration-200 ${
            isDragOver 
              ? 'border-primary-blue bg-primary-blue/10' 
              : 'border-gray-600 hover:border-gray-500'
          }`}
          onDrop={handleDrop}
          onDragOver={(e) => { e.preventDefault(); setIsDragOver(true); }}
          onDragLeave={() => setIsDragOver(false)}
        >
          <div className="text-center">
            <Upload className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-text-light mb-2">
              Upload File for AI Scanning
            </h3>
            <p className="text-gray-400 mb-4">
              Drag and drop a file here, or click to browse
            </p>
            
            <label className="btn-primary inline-flex items-center cursor-pointer">
              <File className="w-4 h-4 mr-2" />
              Select File
              <input
                type="file"
                className="hidden"
                onChange={handleFileInput}
                disabled={isScanning}
              />
            </label>
            
            <div className="mt-4 text-xs text-gray-500">
              Supported formats: All file types â€¢ Max size: 100MB
            </div>
          </div>
        </div>
      </div>

      {/* Scanning Progress */}
      {isScanning && (
        <div className="mb-8 card bg-gradient-to-r from-gray-800 to-gray-900 border-primary-blue/30">
          <div className="flex items-center mb-4">
            <Scan className="w-6 h-6 text-primary-blue mr-3 animate-pulse" />
            <h2 className="text-xl font-semibold text-text-light">AI Scanning in Progress</h2>
          </div>
          
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm text-gray-400 mb-2">
                <span>Analyzing: {currentFile}</span>
                <span>{scanProgress}%</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-primary-blue to-blue-400 h-3 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${scanProgress}%` }}
                ></div>
              </div>
            </div>
            
            <div className="flex items-center text-sm text-gray-300">
              <Brain className="w-4 h-4 mr-2 text-primary-blue" />
              <span>AI engine analyzing file patterns and behavior...</span>
            </div>
          </div>
        </div>
      )}

      {/* Quick Scan Options */}
      <div className="mb-8 grid grid-cols-1 md:grid-cols-3 gap-4">
        <button 
          className="card hover:border-primary-blue transition-colors duration-300 text-left p-6"
          onClick={() => simulateScan('system_check.exe', 2048576)}
          disabled={isScanning}
        >
          <Shield className="w-8 h-8 text-primary-blue mb-3" />
          <h3 className="text-lg font-semibold text-text-light mb-2">Quick System Scan</h3>
          <p className="text-gray-400 text-sm">Scan critical system files for threats</p>
        </button>
        
        <button 
          className="card hover:border-primary-blue transition-colors duration-300 text-left p-6"
          onClick={() => simulateScan('deep_scan.bat', 1024)}
          disabled={isScanning}
        >
          <Brain className="w-8 h-8 text-yellow-500 mb-3" />
          <h3 className="text-lg font-semibold text-text-light mb-2">AI Deep Analysis</h3>
          <p className="text-gray-400 text-sm">Advanced behavioral analysis scan</p>
        </button>
        
        <button 
          className="card hover:border-primary-blue transition-colors duration-300 text-left p-6"
          onClick={() => simulateScan('realtime_monitor.dll', 512000)}
          disabled={isScanning}
        >
          <Clock className="w-8 h-8 text-success-green mb-3" />
          <h3 className="text-lg font-semibold text-text-light mb-2">Real-time Monitor</h3>
          <p className="text-gray-400 text-sm">Monitor active processes for threats</p>
        </button>
      </div>

      {/* Scan Results */}
      <div className="card">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-text-light">Recent Scan Results</h2>
          <div className="flex gap-2">
            <span className="text-xs bg-alert-red/20 text-alert-red px-2 py-1 rounded">
              {scanResults.filter(r => r.malwareType).length} Threats Found
            </span>
            <span className="text-xs bg-success-green/20 text-success-green px-2 py-1 rounded">
              {scanResults.filter(r => !r.malwareType).length} Clean Files
            </span>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-700">
            <thead>
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  File Details
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  Scan Results
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  Threat Level
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  AI Analysis
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                  Status
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
              {scanResults.map((result) => (
                <tr key={result.id} className="hover:bg-gray-800/50 transition-colors">
                  <td className="px-6 py-4">
                    <div className="flex items-center">
                      <File className="w-5 h-5 text-gray-400 mr-3" />
                      <div>
                        <div className="text-sm font-medium text-text-light">{result.fileName}</div>
                        <div className="text-xs text-gray-400">
                          {formatFileSize(result.fileSize)} â€¢ Scanned {result.scanTime.toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div>
                      {result.malwareType ? (
                        <div className="space-y-1">
                          <div className="text-sm text-alert-red font-medium">Threat Detected</div>
                          <div className="text-xs text-gray-400">{result.malwareType}</div>
                          {result.threats.length > 1 && (
                            <div className="text-xs text-gray-500">
                              +{result.threats.length - 1} more threats
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="text-sm text-success-green">Clean</div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <ThreatBadge level={result.severity.level} />
                  </td>
                  <td className="px-6 py-4">
                    <div className="max-w-xs">
                      <div className="text-xs text-gray-300 mb-2">
                        {result.aiAnalysis}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center space-x-2">
                      {result.quarantined ? (
                        <>
                          <XCircle className="w-4 h-4 text-alert-red" />
                          <span className="text-xs text-alert-red">Quarantined</span>
                        </>
                      ) : result.malwareType ? (
                        <>
                          <AlertTriangle className="w-4 h-4 text-yellow-500" />
                          <span className="text-xs text-yellow-500">Action Required</span>
                        </>
                      ) : (
                        <>
                          <CheckCircle className="w-4 h-4 text-success-green" />
                          <span className="text-xs text-success-green">Safe</span>
                        </>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* AI Scanner Info */}
      <div className="mt-6 card bg-gradient-to-r from-gray-800 to-gray-900 border-primary-blue/30">
        <div className="flex items-start">
          <div className="p-2 bg-primary-blue rounded-lg mr-4">
            <Brain className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-text-light mb-2">AI Malware Detection Engine</h3>
            <p className="text-gray-300 text-sm leading-relaxed mb-3">
              Our advanced AI uses deep learning algorithms to analyze file behavior, structure, and patterns. 
              The system can detect both known malware signatures and zero-day threats through behavioral analysis.
            </p>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-primary-blue">99.8%</div>
                <div className="text-xs text-gray-400">Detection Rate</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-success-green">&lt;2s</div>
                <div className="text-xs text-gray-400">Scan Time</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-primary-blue">50M+</div>
                <div className="text-xs text-gray-400">Signatures</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-success-green">24/7</div>
                <div className="text-xs text-gray-400">Protection</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareScanner;