import mongoose, { Document, Schema } from 'mongoose';

export interface IMalwareScan extends Document {
  userId: mongoose.Types.ObjectId;
  filename: string;
  originalName: string;
  fileSize: number;
  fileType: string;
  filePath: string;
  fileHash: {
    md5: string;
    sha1: string;
    sha256: string;
  };
  scanResults: {
    isInfected: boolean;
    malwareType?: 'virus' | 'trojan' | 'worm' | 'ransomware' | 'spyware' | 'adware' | 'rootkit' | 'backdoor';
    malwareName?: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    confidence: number;
    aiAnalysis: string;
    detectionMethods: string[];
    signatures: Array<{
      name: string;
      type: string;
      confidence: number;
    }>;
    behaviorAnalysis: {
      suspiciousActivities: string[];
      networkConnections: string[];
      fileModifications: string[];
      registryChanges: string[];
    };
    suggestedActions: string[];
  };
  scanMetadata: {
    scanEngine: string;
    engineVersion: string;
    scanDuration: number;
    scanTimestamp: Date;
    quarantined: boolean;
  };
  status: 'scanning' | 'completed' | 'failed' | 'quarantined';
  errorMessage?: string;
  createdAt: Date;
  updatedAt: Date;
}

const MalwareScanSchema = new Schema<IMalwareScan>({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  filename: {
    type: String,
    required: true
  },
  originalName: {
    type: String,
    required: true
  },
  fileSize: {
    type: Number,
    required: true
  },
  fileType: {
    type: String,
    required: true
  },
  filePath: {
    type: String,
    required: true
  },
  fileHash: {
    md5: {
      type: String,
      required: true
    },
    sha1: {
      type: String,
      required: true
    },
    sha256: {
      type: String,
      required: true
    }
  },
  scanResults: {
    isInfected: {
      type: Boolean,
      default: false
    },
    malwareType: {
      type: String,
      enum: ['virus', 'trojan', 'worm', 'ransomware', 'spyware', 'adware', 'rootkit', 'backdoor']
    },
    malwareName: String,
    severity: {
      type: String,
      enum: ['low', 'medium', 'high', 'critical'],
      default: 'low'
    },
    confidence: {
      type: Number,
      min: 0,
      max: 100,
      default: 0
    },
    aiAnalysis: {
      type: String,
      default: ''
    },
    detectionMethods: [String],
    signatures: [{
      name: {
        type: String,
        required: true
      },
      type: {
        type: String,
        required: true
      },
      confidence: {
        type: Number,
        min: 0,
        max: 100,
        required: true
      }
    }],
    behaviorAnalysis: {
      suspiciousActivities: [String],
      networkConnections: [String],
      fileModifications: [String],
      registryChanges: [String]
    },
    suggestedActions: [String]
  },
  scanMetadata: {
    scanEngine: {
      type: String,
      default: 'AI-ThreatDetector v1.0'
    },
    engineVersion: {
      type: String,
      default: '1.0.0'
    },
    scanDuration: {
      type: Number,
      default: 0
    },
    scanTimestamp: {
      type: Date,
      default: Date.now
    },
    quarantined: {
      type: Boolean,
      default: false
    }
  },
  status: {
    type: String,
    enum: ['scanning', 'completed', 'failed', 'quarantined'],
    default: 'scanning'
  },
  errorMessage: String
}, {
  timestamps: true
});

// Indexes for better performance
MalwareScanSchema.index({ userId: 1, createdAt: -1 });
MalwareScanSchema.index({ 'fileHash.sha256': 1 });
MalwareScanSchema.index({ 'scanResults.isInfected': 1 });
MalwareScanSchema.index({ status: 1 });

export default mongoose.model<IMalwareScan>('MalwareScan', MalwareScanSchema);